// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: grade/v1/grade.proto

package gradev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GradeService_GetGradeByTerm_FullMethodName   = "/grade.v1.GradeService/GetGradeByTerm"
	GradeService_GetGradeScore_FullMethodName    = "/grade.v1.GradeService/GetGradeScore"
	GradeService_GetGraduateGrade_FullMethodName = "/grade.v1.GradeService/GetGraduateGrade"
	GradeService_GetGradeType_FullMethodName     = "/grade.v1.GradeService/GetGradeType"
)

// GradeServiceClient is the client API for GradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 查询成绩的接口定义
type GradeServiceClient interface {
	GetGradeByTerm(ctx context.Context, in *GetGradeByTermReq, opts ...grpc.CallOption) (*GetGradeByTermResp, error)
	GetGradeScore(ctx context.Context, in *GetGradeScoreReq, opts ...grpc.CallOption) (*GetGradeScoreResp, error)
	GetGraduateGrade(ctx context.Context, in *GetGraduateUpdateReq, opts ...grpc.CallOption) (*GetGraduateUpdateResp, error)
	GetGradeType(ctx context.Context, in *GetGradeTypeReq, opts ...grpc.CallOption) (*GetGradeTypeResp, error)
}

type gradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGradeServiceClient(cc grpc.ClientConnInterface) GradeServiceClient {
	return &gradeServiceClient{cc}
}

func (c *gradeServiceClient) GetGradeByTerm(ctx context.Context, in *GetGradeByTermReq, opts ...grpc.CallOption) (*GetGradeByTermResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGradeByTermResp)
	err := c.cc.Invoke(ctx, GradeService_GetGradeByTerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) GetGradeScore(ctx context.Context, in *GetGradeScoreReq, opts ...grpc.CallOption) (*GetGradeScoreResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGradeScoreResp)
	err := c.cc.Invoke(ctx, GradeService_GetGradeScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) GetGraduateGrade(ctx context.Context, in *GetGraduateUpdateReq, opts ...grpc.CallOption) (*GetGraduateUpdateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGraduateUpdateResp)
	err := c.cc.Invoke(ctx, GradeService_GetGraduateGrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) GetGradeType(ctx context.Context, in *GetGradeTypeReq, opts ...grpc.CallOption) (*GetGradeTypeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGradeTypeResp)
	err := c.cc.Invoke(ctx, GradeService_GetGradeType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GradeServiceServer is the server API for GradeService service.
// All implementations must embed UnimplementedGradeServiceServer
// for forward compatibility.
//
// 查询成绩的接口定义
type GradeServiceServer interface {
	GetGradeByTerm(context.Context, *GetGradeByTermReq) (*GetGradeByTermResp, error)
	GetGradeScore(context.Context, *GetGradeScoreReq) (*GetGradeScoreResp, error)
	GetGraduateGrade(context.Context, *GetGraduateUpdateReq) (*GetGraduateUpdateResp, error)
	GetGradeType(context.Context, *GetGradeTypeReq) (*GetGradeTypeResp, error)
	mustEmbedUnimplementedGradeServiceServer()
}

// UnimplementedGradeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGradeServiceServer struct{}

func (UnimplementedGradeServiceServer) GetGradeByTerm(context.Context, *GetGradeByTermReq) (*GetGradeByTermResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradeByTerm not implemented")
}
func (UnimplementedGradeServiceServer) GetGradeScore(context.Context, *GetGradeScoreReq) (*GetGradeScoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradeScore not implemented")
}
func (UnimplementedGradeServiceServer) GetGraduateGrade(context.Context, *GetGraduateUpdateReq) (*GetGraduateUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraduateGrade not implemented")
}
func (UnimplementedGradeServiceServer) GetGradeType(context.Context, *GetGradeTypeReq) (*GetGradeTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradeType not implemented")
}
func (UnimplementedGradeServiceServer) mustEmbedUnimplementedGradeServiceServer() {}
func (UnimplementedGradeServiceServer) testEmbeddedByValue()                      {}

// UnsafeGradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GradeServiceServer will
// result in compilation errors.
type UnsafeGradeServiceServer interface {
	mustEmbedUnimplementedGradeServiceServer()
}

func RegisterGradeServiceServer(s grpc.ServiceRegistrar, srv GradeServiceServer) {
	// If the following call pancis, it indicates UnimplementedGradeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GradeService_ServiceDesc, srv)
}

func _GradeService_GetGradeByTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeByTermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).GetGradeByTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradeService_GetGradeByTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).GetGradeByTerm(ctx, req.(*GetGradeByTermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_GetGradeScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).GetGradeScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradeService_GetGradeScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).GetGradeScore(ctx, req.(*GetGradeScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_GetGraduateGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGraduateUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).GetGraduateGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradeService_GetGraduateGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).GetGraduateGrade(ctx, req.(*GetGraduateUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_GetGradeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).GetGradeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradeService_GetGradeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).GetGradeType(ctx, req.(*GetGradeTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GradeService_ServiceDesc is the grpc.ServiceDesc for GradeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GradeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grade.v1.GradeService",
	HandlerType: (*GradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGradeByTerm",
			Handler:    _GradeService_GetGradeByTerm_Handler,
		},
		{
			MethodName: "GetGradeScore",
			Handler:    _GradeService_GetGradeScore_Handler,
		},
		{
			MethodName: "GetGraduateGrade",
			Handler:    _GradeService_GetGraduateGrade_Handler,
		},
		{
			MethodName: "GetGradeType",
			Handler:    _GradeService_GetGradeType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grade/v1/grade.proto",
}
