// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: infoSum/v1/infoSum.proto

package infoSumv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InfoSumService_GetInfoSums_FullMethodName = "/infoSum.v1.InfoSumService/GetInfoSums"
	InfoSumService_SaveInfoSum_FullMethodName = "/infoSum.v1.InfoSumService/SaveInfoSum"
	InfoSumService_DelInfoSum_FullMethodName  = "/infoSum.v1.InfoSumService/DelInfoSum"
)

// InfoSumServiceClient is the client API for InfoSumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoSumServiceClient interface {
	GetInfoSums(ctx context.Context, in *GetInfoSumsRequest, opts ...grpc.CallOption) (*GetInfoSumsResponse, error)
	SaveInfoSum(ctx context.Context, in *SaveInfoSumRequest, opts ...grpc.CallOption) (*SaveInfoSumResponse, error)
	DelInfoSum(ctx context.Context, in *DelInfoSumRequest, opts ...grpc.CallOption) (*DelInfoSumResponse, error)
}

type infoSumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoSumServiceClient(cc grpc.ClientConnInterface) InfoSumServiceClient {
	return &infoSumServiceClient{cc}
}

func (c *infoSumServiceClient) GetInfoSums(ctx context.Context, in *GetInfoSumsRequest, opts ...grpc.CallOption) (*GetInfoSumsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoSumsResponse)
	err := c.cc.Invoke(ctx, InfoSumService_GetInfoSums_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoSumServiceClient) SaveInfoSum(ctx context.Context, in *SaveInfoSumRequest, opts ...grpc.CallOption) (*SaveInfoSumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveInfoSumResponse)
	err := c.cc.Invoke(ctx, InfoSumService_SaveInfoSum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoSumServiceClient) DelInfoSum(ctx context.Context, in *DelInfoSumRequest, opts ...grpc.CallOption) (*DelInfoSumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelInfoSumResponse)
	err := c.cc.Invoke(ctx, InfoSumService_DelInfoSum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoSumServiceServer is the server API for InfoSumService service.
// All implementations must embed UnimplementedInfoSumServiceServer
// for forward compatibility.
type InfoSumServiceServer interface {
	GetInfoSums(context.Context, *GetInfoSumsRequest) (*GetInfoSumsResponse, error)
	SaveInfoSum(context.Context, *SaveInfoSumRequest) (*SaveInfoSumResponse, error)
	DelInfoSum(context.Context, *DelInfoSumRequest) (*DelInfoSumResponse, error)
	mustEmbedUnimplementedInfoSumServiceServer()
}

// UnimplementedInfoSumServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInfoSumServiceServer struct{}

func (UnimplementedInfoSumServiceServer) GetInfoSums(context.Context, *GetInfoSumsRequest) (*GetInfoSumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoSums not implemented")
}
func (UnimplementedInfoSumServiceServer) SaveInfoSum(context.Context, *SaveInfoSumRequest) (*SaveInfoSumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveInfoSum not implemented")
}
func (UnimplementedInfoSumServiceServer) DelInfoSum(context.Context, *DelInfoSumRequest) (*DelInfoSumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelInfoSum not implemented")
}
func (UnimplementedInfoSumServiceServer) mustEmbedUnimplementedInfoSumServiceServer() {}
func (UnimplementedInfoSumServiceServer) testEmbeddedByValue()                        {}

// UnsafeInfoSumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoSumServiceServer will
// result in compilation errors.
type UnsafeInfoSumServiceServer interface {
	mustEmbedUnimplementedInfoSumServiceServer()
}

func RegisterInfoSumServiceServer(s grpc.ServiceRegistrar, srv InfoSumServiceServer) {
	// If the following call pancis, it indicates UnimplementedInfoSumServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InfoSumService_ServiceDesc, srv)
}

func _InfoSumService_GetInfoSums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoSumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoSumServiceServer).GetInfoSums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoSumService_GetInfoSums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoSumServiceServer).GetInfoSums(ctx, req.(*GetInfoSumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoSumService_SaveInfoSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveInfoSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoSumServiceServer).SaveInfoSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoSumService_SaveInfoSum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoSumServiceServer).SaveInfoSum(ctx, req.(*SaveInfoSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoSumService_DelInfoSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelInfoSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoSumServiceServer).DelInfoSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoSumService_DelInfoSum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoSumServiceServer).DelInfoSum(ctx, req.(*DelInfoSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InfoSumService_ServiceDesc is the grpc.ServiceDesc for InfoSumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfoSumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infoSum.v1.InfoSumService",
	HandlerType: (*InfoSumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfoSums",
			Handler:    _InfoSumService_GetInfoSums_Handler,
		},
		{
			MethodName: "SaveInfoSum",
			Handler:    _InfoSumService_SaveInfoSum_Handler,
		},
		{
			MethodName: "DelInfoSum",
			Handler:    _InfoSumService_DelInfoSum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infoSum/v1/infoSum.proto",
}
