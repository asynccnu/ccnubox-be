// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: website/v1/website.proto

package websitev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebsiteService_GetWebsites_FullMethodName = "/website.v1.WebsiteService/GetWebsites"
	WebsiteService_SaveWebsite_FullMethodName = "/website.v1.WebsiteService/SaveWebsite"
	WebsiteService_DelWebsite_FullMethodName  = "/website.v1.WebsiteService/DelWebsite"
)

// WebsiteServiceClient is the client API for WebsiteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebsiteServiceClient interface {
	GetWebsites(ctx context.Context, in *GetWebsitesRequest, opts ...grpc.CallOption) (*GetWebsitesResponse, error)
	SaveWebsite(ctx context.Context, in *SaveWebsiteRequest, opts ...grpc.CallOption) (*SaveWebsiteResponse, error)
	DelWebsite(ctx context.Context, in *DelWebsiteRequest, opts ...grpc.CallOption) (*DelWebsiteResponse, error)
}

type websiteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsiteServiceClient(cc grpc.ClientConnInterface) WebsiteServiceClient {
	return &websiteServiceClient{cc}
}

func (c *websiteServiceClient) GetWebsites(ctx context.Context, in *GetWebsitesRequest, opts ...grpc.CallOption) (*GetWebsitesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWebsitesResponse)
	err := c.cc.Invoke(ctx, WebsiteService_GetWebsites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websiteServiceClient) SaveWebsite(ctx context.Context, in *SaveWebsiteRequest, opts ...grpc.CallOption) (*SaveWebsiteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveWebsiteResponse)
	err := c.cc.Invoke(ctx, WebsiteService_SaveWebsite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websiteServiceClient) DelWebsite(ctx context.Context, in *DelWebsiteRequest, opts ...grpc.CallOption) (*DelWebsiteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelWebsiteResponse)
	err := c.cc.Invoke(ctx, WebsiteService_DelWebsite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsiteServiceServer is the server API for WebsiteService service.
// All implementations must embed UnimplementedWebsiteServiceServer
// for forward compatibility.
type WebsiteServiceServer interface {
	GetWebsites(context.Context, *GetWebsitesRequest) (*GetWebsitesResponse, error)
	SaveWebsite(context.Context, *SaveWebsiteRequest) (*SaveWebsiteResponse, error)
	DelWebsite(context.Context, *DelWebsiteRequest) (*DelWebsiteResponse, error)
	mustEmbedUnimplementedWebsiteServiceServer()
}

// UnimplementedWebsiteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebsiteServiceServer struct{}

func (UnimplementedWebsiteServiceServer) GetWebsites(context.Context, *GetWebsitesRequest) (*GetWebsitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebsites not implemented")
}
func (UnimplementedWebsiteServiceServer) SaveWebsite(context.Context, *SaveWebsiteRequest) (*SaveWebsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveWebsite not implemented")
}
func (UnimplementedWebsiteServiceServer) DelWebsite(context.Context, *DelWebsiteRequest) (*DelWebsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelWebsite not implemented")
}
func (UnimplementedWebsiteServiceServer) mustEmbedUnimplementedWebsiteServiceServer() {}
func (UnimplementedWebsiteServiceServer) testEmbeddedByValue()                        {}

// UnsafeWebsiteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebsiteServiceServer will
// result in compilation errors.
type UnsafeWebsiteServiceServer interface {
	mustEmbedUnimplementedWebsiteServiceServer()
}

func RegisterWebsiteServiceServer(s grpc.ServiceRegistrar, srv WebsiteServiceServer) {
	// If the following call pancis, it indicates UnimplementedWebsiteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebsiteService_ServiceDesc, srv)
}

func _WebsiteService_GetWebsites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebsitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteServiceServer).GetWebsites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsiteService_GetWebsites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteServiceServer).GetWebsites(ctx, req.(*GetWebsitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsiteService_SaveWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveWebsiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteServiceServer).SaveWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsiteService_SaveWebsite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteServiceServer).SaveWebsite(ctx, req.(*SaveWebsiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsiteService_DelWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelWebsiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteServiceServer).DelWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsiteService_DelWebsite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteServiceServer).DelWebsite(ctx, req.(*DelWebsiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebsiteService_ServiceDesc is the grpc.ServiceDesc for WebsiteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebsiteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "website.v1.WebsiteService",
	HandlerType: (*WebsiteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWebsites",
			Handler:    _WebsiteService_GetWebsites_Handler,
		},
		{
			MethodName: "SaveWebsite",
			Handler:    _WebsiteService_SaveWebsite_Handler,
		},
		{
			MethodName: "DelWebsite",
			Handler:    _WebsiteService_DelWebsite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "website/v1/website.proto",
}
