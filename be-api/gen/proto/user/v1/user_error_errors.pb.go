// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package userv1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUserNotFoundError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_NOT_FOUND_ERROR.String() && e.Code == 404
}

func ErrorUserNotFoundError(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_USER_NOT_FOUND_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsDefaultDaoError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_DEFAULT_DAO_ERROR.String() && e.Code == 501
}

func ErrorDefaultDaoError(format string, args ...interface{}) *errors.Error {
	return errors.New(501, UserErrorReason_DEFAULT_DAO_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsSaveUserError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SAVE_USER_ERROR.String() && e.Code == 502
}

func ErrorSaveUserError(format string, args ...interface{}) *errors.Error {
	return errors.New(502, UserErrorReason_SAVE_USER_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsCcnuGetcookieError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_CCNU_GETCOOKIE_ERROR.String() && e.Code == 503
}

func ErrorCcnuGetcookieError(format string, args ...interface{}) *errors.Error {
	return errors.New(503, UserErrorReason_CCNU_GETCOOKIE_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsEncryptError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_ENCRYPT_ERROR.String() && e.Code == 504
}

func ErrorEncryptError(format string, args ...interface{}) *errors.Error {
	return errors.New(504, UserErrorReason_ENCRYPT_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsDecryptError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_DECRYPT_ERROR.String() && e.Code == 505
}

func ErrorDecryptError(format string, args ...interface{}) *errors.Error {
	return errors.New(505, UserErrorReason_DECRYPT_ERROR.String(), fmt.Sprintf(format, args...))
}
