// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: ccnu/v1/ccnu.proto

package ccnuv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CCNUService_GetXKCookie_FullMethodName = "/ccnu.v1.CCNUService/GetXKCookie"
	CCNUService_LoginCCNU_FullMethodName   = "/ccnu.v1.CCNUService/LoginCCNU"
)

// CCNUServiceClient is the client API for CCNUService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CCNUServiceClient interface {
	GetXKCookie(ctx context.Context, in *GetXKCookieRequest, opts ...grpc.CallOption) (*GetXKCookieResponse, error)
	LoginCCNU(ctx context.Context, in *LoginCCNURequest, opts ...grpc.CallOption) (*LoginCCNUResponse, error)
}

type cCNUServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCCNUServiceClient(cc grpc.ClientConnInterface) CCNUServiceClient {
	return &cCNUServiceClient{cc}
}

func (c *cCNUServiceClient) GetXKCookie(ctx context.Context, in *GetXKCookieRequest, opts ...grpc.CallOption) (*GetXKCookieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetXKCookieResponse)
	err := c.cc.Invoke(ctx, CCNUService_GetXKCookie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCNUServiceClient) LoginCCNU(ctx context.Context, in *LoginCCNURequest, opts ...grpc.CallOption) (*LoginCCNUResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginCCNUResponse)
	err := c.cc.Invoke(ctx, CCNUService_LoginCCNU_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCNUServiceServer is the server API for CCNUService service.
// All implementations must embed UnimplementedCCNUServiceServer
// for forward compatibility.
type CCNUServiceServer interface {
	GetXKCookie(context.Context, *GetXKCookieRequest) (*GetXKCookieResponse, error)
	LoginCCNU(context.Context, *LoginCCNURequest) (*LoginCCNUResponse, error)
	mustEmbedUnimplementedCCNUServiceServer()
}

// UnimplementedCCNUServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCCNUServiceServer struct{}

func (UnimplementedCCNUServiceServer) GetXKCookie(context.Context, *GetXKCookieRequest) (*GetXKCookieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXKCookie not implemented")
}
func (UnimplementedCCNUServiceServer) LoginCCNU(context.Context, *LoginCCNURequest) (*LoginCCNUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCCNU not implemented")
}
func (UnimplementedCCNUServiceServer) mustEmbedUnimplementedCCNUServiceServer() {}
func (UnimplementedCCNUServiceServer) testEmbeddedByValue()                     {}

// UnsafeCCNUServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CCNUServiceServer will
// result in compilation errors.
type UnsafeCCNUServiceServer interface {
	mustEmbedUnimplementedCCNUServiceServer()
}

func RegisterCCNUServiceServer(s grpc.ServiceRegistrar, srv CCNUServiceServer) {
	// If the following call pancis, it indicates UnimplementedCCNUServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CCNUService_ServiceDesc, srv)
}

func _CCNUService_GetXKCookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetXKCookieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCNUServiceServer).GetXKCookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCNUService_GetXKCookie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCNUServiceServer).GetXKCookie(ctx, req.(*GetXKCookieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCNUService_LoginCCNU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCCNURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCNUServiceServer).LoginCCNU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCNUService_LoginCCNU_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCNUServiceServer).LoginCCNU(ctx, req.(*LoginCCNURequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CCNUService_ServiceDesc is the grpc.ServiceDesc for CCNUService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CCNUService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ccnu.v1.CCNUService",
	HandlerType: (*CCNUServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetXKCookie",
			Handler:    _CCNUService_GetXKCookie_Handler,
		},
		{
			MethodName: "LoginCCNU",
			Handler:    _CCNUService_LoginCCNU_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ccnu/v1/ccnu.proto",
}
