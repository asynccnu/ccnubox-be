// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: feed/v1/feed.proto

package feedv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeedService_GetFeedEvents_FullMethodName            = "/feed.v1.FeedService/GetFeedEvents"
	FeedService_ReadFeedEvent_FullMethodName            = "/feed.v1.FeedService/ReadFeedEvent"
	FeedService_ClearFeedEvent_FullMethodName           = "/feed.v1.FeedService/ClearFeedEvent"
	FeedService_ChangeFeedAllowList_FullMethodName      = "/feed.v1.FeedService/ChangeFeedAllowList"
	FeedService_GetFeedAllowList_FullMethodName         = "/feed.v1.FeedService/GetFeedAllowList"
	FeedService_SaveFeedToken_FullMethodName            = "/feed.v1.FeedService/SaveFeedToken"
	FeedService_RemoveFeedToken_FullMethodName          = "/feed.v1.FeedService/RemoveFeedToken"
	FeedService_PublicMuxiOfficialMSG_FullMethodName    = "/feed.v1.FeedService/PublicMuxiOfficialMSG"
	FeedService_StopMuxiOfficialMSG_FullMethodName      = "/feed.v1.FeedService/StopMuxiOfficialMSG"
	FeedService_GetToBePublicOfficialMSG_FullMethodName = "/feed.v1.FeedService/GetToBePublicOfficialMSG"
	FeedService_PublicFeedEvent_FullMethodName          = "/feed.v1.FeedService/PublicFeedEvent"
)

// FeedServiceClient is the client API for FeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedServiceClient interface {
	GetFeedEvents(ctx context.Context, in *GetFeedEventsReq, opts ...grpc.CallOption) (*GetFeedEventsResp, error)
	ReadFeedEvent(ctx context.Context, in *ReadFeedEventReq, opts ...grpc.CallOption) (*ReadFeedEventResp, error)
	ClearFeedEvent(ctx context.Context, in *ClearFeedEventReq, opts ...grpc.CallOption) (*ClearFeedEventResp, error)
	ChangeFeedAllowList(ctx context.Context, in *ChangeFeedAllowListReq, opts ...grpc.CallOption) (*ChangeFeedAllowListResp, error)
	GetFeedAllowList(ctx context.Context, in *GetFeedAllowListReq, opts ...grpc.CallOption) (*GetFeedAllowListResp, error)
	SaveFeedToken(ctx context.Context, in *SaveFeedTokenReq, opts ...grpc.CallOption) (*SaveFeedTokenResp, error)
	RemoveFeedToken(ctx context.Context, in *RemoveFeedTokenReq, opts ...grpc.CallOption) (*RemoveFeedTokenResp, error)
	PublicMuxiOfficialMSG(ctx context.Context, in *PublicMuxiOfficialMSGReq, opts ...grpc.CallOption) (*PublicMuxiOfficialMSGResp, error)
	StopMuxiOfficialMSG(ctx context.Context, in *StopMuxiOfficialMSGReq, opts ...grpc.CallOption) (*StopMuxiOfficialMSGResp, error)
	GetToBePublicOfficialMSG(ctx context.Context, in *GetToBePublicOfficialMSGReq, opts ...grpc.CallOption) (*GetToBePublicOfficialMSGResp, error)
	PublicFeedEvent(ctx context.Context, in *PublicFeedEventReq, opts ...grpc.CallOption) (*PublicFeedEventResp, error)
}

type feedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedServiceClient(cc grpc.ClientConnInterface) FeedServiceClient {
	return &feedServiceClient{cc}
}

func (c *feedServiceClient) GetFeedEvents(ctx context.Context, in *GetFeedEventsReq, opts ...grpc.CallOption) (*GetFeedEventsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedEventsResp)
	err := c.cc.Invoke(ctx, FeedService_GetFeedEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) ReadFeedEvent(ctx context.Context, in *ReadFeedEventReq, opts ...grpc.CallOption) (*ReadFeedEventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadFeedEventResp)
	err := c.cc.Invoke(ctx, FeedService_ReadFeedEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) ClearFeedEvent(ctx context.Context, in *ClearFeedEventReq, opts ...grpc.CallOption) (*ClearFeedEventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearFeedEventResp)
	err := c.cc.Invoke(ctx, FeedService_ClearFeedEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) ChangeFeedAllowList(ctx context.Context, in *ChangeFeedAllowListReq, opts ...grpc.CallOption) (*ChangeFeedAllowListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeFeedAllowListResp)
	err := c.cc.Invoke(ctx, FeedService_ChangeFeedAllowList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) GetFeedAllowList(ctx context.Context, in *GetFeedAllowListReq, opts ...grpc.CallOption) (*GetFeedAllowListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedAllowListResp)
	err := c.cc.Invoke(ctx, FeedService_GetFeedAllowList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) SaveFeedToken(ctx context.Context, in *SaveFeedTokenReq, opts ...grpc.CallOption) (*SaveFeedTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveFeedTokenResp)
	err := c.cc.Invoke(ctx, FeedService_SaveFeedToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) RemoveFeedToken(ctx context.Context, in *RemoveFeedTokenReq, opts ...grpc.CallOption) (*RemoveFeedTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFeedTokenResp)
	err := c.cc.Invoke(ctx, FeedService_RemoveFeedToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) PublicMuxiOfficialMSG(ctx context.Context, in *PublicMuxiOfficialMSGReq, opts ...grpc.CallOption) (*PublicMuxiOfficialMSGResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicMuxiOfficialMSGResp)
	err := c.cc.Invoke(ctx, FeedService_PublicMuxiOfficialMSG_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) StopMuxiOfficialMSG(ctx context.Context, in *StopMuxiOfficialMSGReq, opts ...grpc.CallOption) (*StopMuxiOfficialMSGResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopMuxiOfficialMSGResp)
	err := c.cc.Invoke(ctx, FeedService_StopMuxiOfficialMSG_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) GetToBePublicOfficialMSG(ctx context.Context, in *GetToBePublicOfficialMSGReq, opts ...grpc.CallOption) (*GetToBePublicOfficialMSGResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetToBePublicOfficialMSGResp)
	err := c.cc.Invoke(ctx, FeedService_GetToBePublicOfficialMSG_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedServiceClient) PublicFeedEvent(ctx context.Context, in *PublicFeedEventReq, opts ...grpc.CallOption) (*PublicFeedEventResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicFeedEventResp)
	err := c.cc.Invoke(ctx, FeedService_PublicFeedEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServiceServer is the server API for FeedService service.
// All implementations must embed UnimplementedFeedServiceServer
// for forward compatibility.
type FeedServiceServer interface {
	GetFeedEvents(context.Context, *GetFeedEventsReq) (*GetFeedEventsResp, error)
	ReadFeedEvent(context.Context, *ReadFeedEventReq) (*ReadFeedEventResp, error)
	ClearFeedEvent(context.Context, *ClearFeedEventReq) (*ClearFeedEventResp, error)
	ChangeFeedAllowList(context.Context, *ChangeFeedAllowListReq) (*ChangeFeedAllowListResp, error)
	GetFeedAllowList(context.Context, *GetFeedAllowListReq) (*GetFeedAllowListResp, error)
	SaveFeedToken(context.Context, *SaveFeedTokenReq) (*SaveFeedTokenResp, error)
	RemoveFeedToken(context.Context, *RemoveFeedTokenReq) (*RemoveFeedTokenResp, error)
	PublicMuxiOfficialMSG(context.Context, *PublicMuxiOfficialMSGReq) (*PublicMuxiOfficialMSGResp, error)
	StopMuxiOfficialMSG(context.Context, *StopMuxiOfficialMSGReq) (*StopMuxiOfficialMSGResp, error)
	GetToBePublicOfficialMSG(context.Context, *GetToBePublicOfficialMSGReq) (*GetToBePublicOfficialMSGResp, error)
	PublicFeedEvent(context.Context, *PublicFeedEventReq) (*PublicFeedEventResp, error)
	mustEmbedUnimplementedFeedServiceServer()
}

// UnimplementedFeedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeedServiceServer struct{}

func (UnimplementedFeedServiceServer) GetFeedEvents(context.Context, *GetFeedEventsReq) (*GetFeedEventsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedEvents not implemented")
}
func (UnimplementedFeedServiceServer) ReadFeedEvent(context.Context, *ReadFeedEventReq) (*ReadFeedEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFeedEvent not implemented")
}
func (UnimplementedFeedServiceServer) ClearFeedEvent(context.Context, *ClearFeedEventReq) (*ClearFeedEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearFeedEvent not implemented")
}
func (UnimplementedFeedServiceServer) ChangeFeedAllowList(context.Context, *ChangeFeedAllowListReq) (*ChangeFeedAllowListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeFeedAllowList not implemented")
}
func (UnimplementedFeedServiceServer) GetFeedAllowList(context.Context, *GetFeedAllowListReq) (*GetFeedAllowListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedAllowList not implemented")
}
func (UnimplementedFeedServiceServer) SaveFeedToken(context.Context, *SaveFeedTokenReq) (*SaveFeedTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFeedToken not implemented")
}
func (UnimplementedFeedServiceServer) RemoveFeedToken(context.Context, *RemoveFeedTokenReq) (*RemoveFeedTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFeedToken not implemented")
}
func (UnimplementedFeedServiceServer) PublicMuxiOfficialMSG(context.Context, *PublicMuxiOfficialMSGReq) (*PublicMuxiOfficialMSGResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicMuxiOfficialMSG not implemented")
}
func (UnimplementedFeedServiceServer) StopMuxiOfficialMSG(context.Context, *StopMuxiOfficialMSGReq) (*StopMuxiOfficialMSGResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMuxiOfficialMSG not implemented")
}
func (UnimplementedFeedServiceServer) GetToBePublicOfficialMSG(context.Context, *GetToBePublicOfficialMSGReq) (*GetToBePublicOfficialMSGResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToBePublicOfficialMSG not implemented")
}
func (UnimplementedFeedServiceServer) PublicFeedEvent(context.Context, *PublicFeedEventReq) (*PublicFeedEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicFeedEvent not implemented")
}
func (UnimplementedFeedServiceServer) mustEmbedUnimplementedFeedServiceServer() {}
func (UnimplementedFeedServiceServer) testEmbeddedByValue()                     {}

// UnsafeFeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServiceServer will
// result in compilation errors.
type UnsafeFeedServiceServer interface {
	mustEmbedUnimplementedFeedServiceServer()
}

func RegisterFeedServiceServer(s grpc.ServiceRegistrar, srv FeedServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeedService_ServiceDesc, srv)
}

func _FeedService_GetFeedEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedEventsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).GetFeedEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedService_GetFeedEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).GetFeedEvents(ctx, req.(*GetFeedEventsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_ReadFeedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFeedEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).ReadFeedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedService_ReadFeedEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).ReadFeedEvent(ctx, req.(*ReadFeedEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_ClearFeedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearFeedEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).ClearFeedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedService_ClearFeedEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).ClearFeedEvent(ctx, req.(*ClearFeedEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_ChangeFeedAllowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeFeedAllowListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).ChangeFeedAllowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedService_ChangeFeedAllowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).ChangeFeedAllowList(ctx, req.(*ChangeFeedAllowListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_GetFeedAllowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedAllowListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).GetFeedAllowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedService_GetFeedAllowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).GetFeedAllowList(ctx, req.(*GetFeedAllowListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_SaveFeedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveFeedTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).SaveFeedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedService_SaveFeedToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).SaveFeedToken(ctx, req.(*SaveFeedTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_RemoveFeedToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFeedTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).RemoveFeedToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedService_RemoveFeedToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).RemoveFeedToken(ctx, req.(*RemoveFeedTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_PublicMuxiOfficialMSG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicMuxiOfficialMSGReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).PublicMuxiOfficialMSG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedService_PublicMuxiOfficialMSG_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).PublicMuxiOfficialMSG(ctx, req.(*PublicMuxiOfficialMSGReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_StopMuxiOfficialMSG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMuxiOfficialMSGReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).StopMuxiOfficialMSG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedService_StopMuxiOfficialMSG_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).StopMuxiOfficialMSG(ctx, req.(*StopMuxiOfficialMSGReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_GetToBePublicOfficialMSG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToBePublicOfficialMSGReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).GetToBePublicOfficialMSG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedService_GetToBePublicOfficialMSG_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).GetToBePublicOfficialMSG(ctx, req.(*GetToBePublicOfficialMSGReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedService_PublicFeedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicFeedEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiceServer).PublicFeedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedService_PublicFeedEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiceServer).PublicFeedEvent(ctx, req.(*PublicFeedEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedService_ServiceDesc is the grpc.ServiceDesc for FeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed.v1.FeedService",
	HandlerType: (*FeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeedEvents",
			Handler:    _FeedService_GetFeedEvents_Handler,
		},
		{
			MethodName: "ReadFeedEvent",
			Handler:    _FeedService_ReadFeedEvent_Handler,
		},
		{
			MethodName: "ClearFeedEvent",
			Handler:    _FeedService_ClearFeedEvent_Handler,
		},
		{
			MethodName: "ChangeFeedAllowList",
			Handler:    _FeedService_ChangeFeedAllowList_Handler,
		},
		{
			MethodName: "GetFeedAllowList",
			Handler:    _FeedService_GetFeedAllowList_Handler,
		},
		{
			MethodName: "SaveFeedToken",
			Handler:    _FeedService_SaveFeedToken_Handler,
		},
		{
			MethodName: "RemoveFeedToken",
			Handler:    _FeedService_RemoveFeedToken_Handler,
		},
		{
			MethodName: "PublicMuxiOfficialMSG",
			Handler:    _FeedService_PublicMuxiOfficialMSG_Handler,
		},
		{
			MethodName: "StopMuxiOfficialMSG",
			Handler:    _FeedService_StopMuxiOfficialMSG_Handler,
		},
		{
			MethodName: "GetToBePublicOfficialMSG",
			Handler:    _FeedService_GetToBePublicOfficialMSG_Handler,
		},
		{
			MethodName: "PublicFeedEvent",
			Handler:    _FeedService_PublicFeedEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feed/v1/feed.proto",
}
