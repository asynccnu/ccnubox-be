// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: feedback_help/v1/feedback_help.proto

package feedback_helpv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeedbackHelp_GetQuestions_FullMethodName               = "/api.feedback_help.v1.FeedbackHelp/GetQuestions"
	FeedbackHelp_FindQuestionByName_FullMethodName         = "/api.feedback_help.v1.FeedbackHelp/FindQuestionByName"
	FeedbackHelp_CreateQuestion_FullMethodName             = "/api.feedback_help.v1.FeedbackHelp/CreateQuestion"
	FeedbackHelp_ChangeQuestion_FullMethodName             = "/api.feedback_help.v1.FeedbackHelp/ChangeQuestion"
	FeedbackHelp_DeleteQuestion_FullMethodName             = "/api.feedback_help.v1.FeedbackHelp/DeleteQuestion"
	FeedbackHelp_NoteQuestion_FullMethodName               = "/api.feedback_help.v1.FeedbackHelp/NoteQuestion"
	FeedbackHelp_NoteEventTracking_FullMethodName          = "/api.feedback_help.v1.FeedbackHelp/NoteEventTracking"
	FeedbackHelp_NoteMoreFeedbackSearchSkip_FullMethodName = "/api.feedback_help.v1.FeedbackHelp/NoteMoreFeedbackSearchSkip"
)

// FeedbackHelpClient is the client API for FeedbackHelp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedbackHelpClient interface {
	// 获取所有常见问题
	GetQuestions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetQuestionsResponse, error)
	// 通过问题名称查找问题
	FindQuestionByName(ctx context.Context, in *FindQuestionByNameRequest, opts ...grpc.CallOption) (*FindQuestionByNameResponse, error)
	// 创建新的常见问题
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	// 更新常见问题
	ChangeQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	// 删除常见问题
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	// 记录问题解决情况
	NoteQuestion(ctx context.Context, in *NoteQuestionRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	// 记录用户事件
	NoteEventTracking(ctx context.Context, in *NoteEventTrackingRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	// 记录跳过问题的反馈
	NoteMoreFeedbackSearchSkip(ctx context.Context, in *NoteMoreFeedbackSearchSkipRequest, opts ...grpc.CallOption) (*OperationResponse, error)
}

type feedbackHelpClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbackHelpClient(cc grpc.ClientConnInterface) FeedbackHelpClient {
	return &feedbackHelpClient{cc}
}

func (c *feedbackHelpClient) GetQuestions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionsResponse)
	err := c.cc.Invoke(ctx, FeedbackHelp_GetQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackHelpClient) FindQuestionByName(ctx context.Context, in *FindQuestionByNameRequest, opts ...grpc.CallOption) (*FindQuestionByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindQuestionByNameResponse)
	err := c.cc.Invoke(ctx, FeedbackHelp_FindQuestionByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackHelpClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, FeedbackHelp_CreateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackHelpClient) ChangeQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, FeedbackHelp_ChangeQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackHelpClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, FeedbackHelp_DeleteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackHelpClient) NoteQuestion(ctx context.Context, in *NoteQuestionRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, FeedbackHelp_NoteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackHelpClient) NoteEventTracking(ctx context.Context, in *NoteEventTrackingRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, FeedbackHelp_NoteEventTracking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackHelpClient) NoteMoreFeedbackSearchSkip(ctx context.Context, in *NoteMoreFeedbackSearchSkipRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, FeedbackHelp_NoteMoreFeedbackSearchSkip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbackHelpServer is the server API for FeedbackHelp service.
// All implementations must embed UnimplementedFeedbackHelpServer
// for forward compatibility.
type FeedbackHelpServer interface {
	// 获取所有常见问题
	GetQuestions(context.Context, *EmptyRequest) (*GetQuestionsResponse, error)
	// 通过问题名称查找问题
	FindQuestionByName(context.Context, *FindQuestionByNameRequest) (*FindQuestionByNameResponse, error)
	// 创建新的常见问题
	CreateQuestion(context.Context, *CreateQuestionRequest) (*OperationResponse, error)
	// 更新常见问题
	ChangeQuestion(context.Context, *UpdateQuestionRequest) (*OperationResponse, error)
	// 删除常见问题
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*OperationResponse, error)
	// 记录问题解决情况
	NoteQuestion(context.Context, *NoteQuestionRequest) (*OperationResponse, error)
	// 记录用户事件
	NoteEventTracking(context.Context, *NoteEventTrackingRequest) (*OperationResponse, error)
	// 记录跳过问题的反馈
	NoteMoreFeedbackSearchSkip(context.Context, *NoteMoreFeedbackSearchSkipRequest) (*OperationResponse, error)
	mustEmbedUnimplementedFeedbackHelpServer()
}

// UnimplementedFeedbackHelpServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeedbackHelpServer struct{}

func (UnimplementedFeedbackHelpServer) GetQuestions(context.Context, *EmptyRequest) (*GetQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (UnimplementedFeedbackHelpServer) FindQuestionByName(context.Context, *FindQuestionByNameRequest) (*FindQuestionByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindQuestionByName not implemented")
}
func (UnimplementedFeedbackHelpServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedFeedbackHelpServer) ChangeQuestion(context.Context, *UpdateQuestionRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeQuestion not implemented")
}
func (UnimplementedFeedbackHelpServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedFeedbackHelpServer) NoteQuestion(context.Context, *NoteQuestionRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoteQuestion not implemented")
}
func (UnimplementedFeedbackHelpServer) NoteEventTracking(context.Context, *NoteEventTrackingRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoteEventTracking not implemented")
}
func (UnimplementedFeedbackHelpServer) NoteMoreFeedbackSearchSkip(context.Context, *NoteMoreFeedbackSearchSkipRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoteMoreFeedbackSearchSkip not implemented")
}
func (UnimplementedFeedbackHelpServer) mustEmbedUnimplementedFeedbackHelpServer() {}
func (UnimplementedFeedbackHelpServer) testEmbeddedByValue()                      {}

// UnsafeFeedbackHelpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedbackHelpServer will
// result in compilation errors.
type UnsafeFeedbackHelpServer interface {
	mustEmbedUnimplementedFeedbackHelpServer()
}

func RegisterFeedbackHelpServer(s grpc.ServiceRegistrar, srv FeedbackHelpServer) {
	// If the following call pancis, it indicates UnimplementedFeedbackHelpServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeedbackHelp_ServiceDesc, srv)
}

func _FeedbackHelp_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackHelpServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackHelp_GetQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackHelpServer).GetQuestions(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackHelp_FindQuestionByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindQuestionByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackHelpServer).FindQuestionByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackHelp_FindQuestionByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackHelpServer).FindQuestionByName(ctx, req.(*FindQuestionByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackHelp_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackHelpServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackHelp_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackHelpServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackHelp_ChangeQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackHelpServer).ChangeQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackHelp_ChangeQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackHelpServer).ChangeQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackHelp_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackHelpServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackHelp_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackHelpServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackHelp_NoteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackHelpServer).NoteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackHelp_NoteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackHelpServer).NoteQuestion(ctx, req.(*NoteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackHelp_NoteEventTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteEventTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackHelpServer).NoteEventTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackHelp_NoteEventTracking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackHelpServer).NoteEventTracking(ctx, req.(*NoteEventTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackHelp_NoteMoreFeedbackSearchSkip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteMoreFeedbackSearchSkipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackHelpServer).NoteMoreFeedbackSearchSkip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeedbackHelp_NoteMoreFeedbackSearchSkip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackHelpServer).NoteMoreFeedbackSearchSkip(ctx, req.(*NoteMoreFeedbackSearchSkipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedbackHelp_ServiceDesc is the grpc.ServiceDesc for FeedbackHelp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedbackHelp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.feedback_help.v1.FeedbackHelp",
	HandlerType: (*FeedbackHelpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestions",
			Handler:    _FeedbackHelp_GetQuestions_Handler,
		},
		{
			MethodName: "FindQuestionByName",
			Handler:    _FeedbackHelp_FindQuestionByName_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _FeedbackHelp_CreateQuestion_Handler,
		},
		{
			MethodName: "ChangeQuestion",
			Handler:    _FeedbackHelp_ChangeQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _FeedbackHelp_DeleteQuestion_Handler,
		},
		{
			MethodName: "NoteQuestion",
			Handler:    _FeedbackHelp_NoteQuestion_Handler,
		},
		{
			MethodName: "NoteEventTracking",
			Handler:    _FeedbackHelp_NoteEventTracking_Handler,
		},
		{
			MethodName: "NoteMoreFeedbackSearchSkip",
			Handler:    _FeedbackHelp_NoteMoreFeedbackSearchSkip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feedback_help/v1/feedback_help.proto",
}
