//syntax = "proto3";
//package elecprice.v1;
//option go_package = "github.com/asynccnu/be-api/gen/proto/elecprice/v1;elecpricev1";
//import "google/protobuf/any.proto";

//// 查询电费的接口定义
//service ElecpriceService {
//  rpc Check (CheckRequest) returns (CheckResponse);
//  rpc SetStandard (SetStandardRequest) returns (SetStandardResponse);
//}
//
//// 请求体
//message CheckRequest {
//  Place place =1; //房间具体信息
//}
//
//// 响应体
//message CheckResponse {
//  Price  price = 1; // 电费
//}
//
//// 电费结构体
//message Price{
//  string LightingRemainMoney = 1; // 剩余照明电费
//  string LightingYesterdayUseValue = 2; // 昨日花费照明电量
//  string LightingYesterdayUseMoney      = 3; // 昨日花费照明电费
//  string AirRemainMoney      = 4; // 昨日空调电费
//  string AirYesterdayUseValue  = 5; // 昨日花费空调电量
//  string AirYesterdayUseMoney       = 6; // 昨日花费空调电费
//}
//
//// 请求体
//message SetStandardRequest {
//  string studentId =1;
//  int64 money       = 2;  //金额
//  Place place = 3;
//}
//
//message Place{
//  string area       = 2;  //区域
//  string building   = 3;  //建筑
//  string room       = 4;  //房间号
//}
//
//// 响应体
//message SetStandardResponse{}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: elecprice/v1/elecprice.proto

package elecpricev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ElecpriceService_GetArchitecture_FullMethodName = "/elecprice.v1.ElecpriceService/GetArchitecture"
	ElecpriceService_GetRoomInfo_FullMethodName     = "/elecprice.v1.ElecpriceService/GetRoomInfo"
	ElecpriceService_GetPrice_FullMethodName        = "/elecprice.v1.ElecpriceService/GetPrice"
	ElecpriceService_SetStandard_FullMethodName     = "/elecprice.v1.ElecpriceService/SetStandard"
	ElecpriceService_GetStandardList_FullMethodName = "/elecprice.v1.ElecpriceService/GetStandardList"
	ElecpriceService_CancelStandard_FullMethodName  = "/elecprice.v1.ElecpriceService/CancelStandard"
)

// ElecpriceServiceClient is the client API for ElecpriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 查询电费的接口定义
type ElecpriceServiceClient interface {
	GetArchitecture(ctx context.Context, in *GetArchitectureRequest, opts ...grpc.CallOption) (*GetArchitectureResponse, error)
	GetRoomInfo(ctx context.Context, in *GetRoomInfoRequest, opts ...grpc.CallOption) (*GetRoomInfoResponse, error)
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
	SetStandard(ctx context.Context, in *SetStandardRequest, opts ...grpc.CallOption) (*SetStandardResponse, error)
	GetStandardList(ctx context.Context, in *GetStandardListRequest, opts ...grpc.CallOption) (*GetStandardListResponse, error)
	CancelStandard(ctx context.Context, in *CancelStandardRequest, opts ...grpc.CallOption) (*CancelStandardResponse, error)
}

type elecpriceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewElecpriceServiceClient(cc grpc.ClientConnInterface) ElecpriceServiceClient {
	return &elecpriceServiceClient{cc}
}

func (c *elecpriceServiceClient) GetArchitecture(ctx context.Context, in *GetArchitectureRequest, opts ...grpc.CallOption) (*GetArchitectureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArchitectureResponse)
	err := c.cc.Invoke(ctx, ElecpriceService_GetArchitecture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elecpriceServiceClient) GetRoomInfo(ctx context.Context, in *GetRoomInfoRequest, opts ...grpc.CallOption) (*GetRoomInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomInfoResponse)
	err := c.cc.Invoke(ctx, ElecpriceService_GetRoomInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elecpriceServiceClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, ElecpriceService_GetPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elecpriceServiceClient) SetStandard(ctx context.Context, in *SetStandardRequest, opts ...grpc.CallOption) (*SetStandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetStandardResponse)
	err := c.cc.Invoke(ctx, ElecpriceService_SetStandard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elecpriceServiceClient) GetStandardList(ctx context.Context, in *GetStandardListRequest, opts ...grpc.CallOption) (*GetStandardListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStandardListResponse)
	err := c.cc.Invoke(ctx, ElecpriceService_GetStandardList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elecpriceServiceClient) CancelStandard(ctx context.Context, in *CancelStandardRequest, opts ...grpc.CallOption) (*CancelStandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelStandardResponse)
	err := c.cc.Invoke(ctx, ElecpriceService_CancelStandard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElecpriceServiceServer is the server API for ElecpriceService service.
// All implementations must embed UnimplementedElecpriceServiceServer
// for forward compatibility.
//
// 查询电费的接口定义
type ElecpriceServiceServer interface {
	GetArchitecture(context.Context, *GetArchitectureRequest) (*GetArchitectureResponse, error)
	GetRoomInfo(context.Context, *GetRoomInfoRequest) (*GetRoomInfoResponse, error)
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	SetStandard(context.Context, *SetStandardRequest) (*SetStandardResponse, error)
	GetStandardList(context.Context, *GetStandardListRequest) (*GetStandardListResponse, error)
	CancelStandard(context.Context, *CancelStandardRequest) (*CancelStandardResponse, error)
	mustEmbedUnimplementedElecpriceServiceServer()
}

// UnimplementedElecpriceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedElecpriceServiceServer struct{}

func (UnimplementedElecpriceServiceServer) GetArchitecture(context.Context, *GetArchitectureRequest) (*GetArchitectureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchitecture not implemented")
}
func (UnimplementedElecpriceServiceServer) GetRoomInfo(context.Context, *GetRoomInfoRequest) (*GetRoomInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomInfo not implemented")
}
func (UnimplementedElecpriceServiceServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedElecpriceServiceServer) SetStandard(context.Context, *SetStandardRequest) (*SetStandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStandard not implemented")
}
func (UnimplementedElecpriceServiceServer) GetStandardList(context.Context, *GetStandardListRequest) (*GetStandardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStandardList not implemented")
}
func (UnimplementedElecpriceServiceServer) CancelStandard(context.Context, *CancelStandardRequest) (*CancelStandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelStandard not implemented")
}
func (UnimplementedElecpriceServiceServer) mustEmbedUnimplementedElecpriceServiceServer() {}
func (UnimplementedElecpriceServiceServer) testEmbeddedByValue()                          {}

// UnsafeElecpriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElecpriceServiceServer will
// result in compilation errors.
type UnsafeElecpriceServiceServer interface {
	mustEmbedUnimplementedElecpriceServiceServer()
}

func RegisterElecpriceServiceServer(s grpc.ServiceRegistrar, srv ElecpriceServiceServer) {
	// If the following call pancis, it indicates UnimplementedElecpriceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ElecpriceService_ServiceDesc, srv)
}

func _ElecpriceService_GetArchitecture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchitectureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElecpriceServiceServer).GetArchitecture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElecpriceService_GetArchitecture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElecpriceServiceServer).GetArchitecture(ctx, req.(*GetArchitectureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElecpriceService_GetRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElecpriceServiceServer).GetRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElecpriceService_GetRoomInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElecpriceServiceServer).GetRoomInfo(ctx, req.(*GetRoomInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElecpriceService_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElecpriceServiceServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElecpriceService_GetPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElecpriceServiceServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElecpriceService_SetStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElecpriceServiceServer).SetStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElecpriceService_SetStandard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElecpriceServiceServer).SetStandard(ctx, req.(*SetStandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElecpriceService_GetStandardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStandardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElecpriceServiceServer).GetStandardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElecpriceService_GetStandardList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElecpriceServiceServer).GetStandardList(ctx, req.(*GetStandardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElecpriceService_CancelStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelStandardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElecpriceServiceServer).CancelStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElecpriceService_CancelStandard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElecpriceServiceServer).CancelStandard(ctx, req.(*CancelStandardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ElecpriceService_ServiceDesc is the grpc.ServiceDesc for ElecpriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElecpriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elecprice.v1.ElecpriceService",
	HandlerType: (*ElecpriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArchitecture",
			Handler:    _ElecpriceService_GetArchitecture_Handler,
		},
		{
			MethodName: "GetRoomInfo",
			Handler:    _ElecpriceService_GetRoomInfo_Handler,
		},
		{
			MethodName: "GetPrice",
			Handler:    _ElecpriceService_GetPrice_Handler,
		},
		{
			MethodName: "SetStandard",
			Handler:    _ElecpriceService_SetStandard_Handler,
		},
		{
			MethodName: "GetStandardList",
			Handler:    _ElecpriceService_GetStandardList_Handler,
		},
		{
			MethodName: "CancelStandard",
			Handler:    _ElecpriceService_CancelStandard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elecprice/v1/elecprice.proto",
}
